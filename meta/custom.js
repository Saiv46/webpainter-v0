
// Класс Zvezda должна наследоваться от "родителя" BaseTool
class Zvezda extends BaseTool {

	// "Геттер" (- вычисляемое значение, ключевое слово - get)
	// что отдаёт информацию о нашей фигуре по запросу.
	// Она будет статична во время работы (ключ. слово - static).
	static get metadata() {
		return {
			name: "Звезда", // Название нашей фигуры/инструмента
			icon: "resources/tool__star.png" // Иконка в папке resources/
		}
	}

	// Тоже "Статичный геттер", но для настроек по-умолчанию.
	// Рекомендуется указывать всё что в настройках 
	// используется здесь, на всякий случай.
	static get optionsDefaults() {
		return {
			fillStyle: "#000"
		}
	}

	// Метод clickDraw() вызывается при клике на полотне пользователем
    clickDraw(x, y) {
		// В качестве параметров даются три переменных: X, Y и A
		// Переменная A пока нам не нужна, поэтому можно её не указывать сверху

		// Рисование на полотне Canvas осуществляется с помощью его "контекста".
		// Но для этого нужно полотно создать, разместить в HTML-коде итд...
		// Но всё этого здесь не нужно делать, здесь можно
		// обойтись вызовом функции this.getContext()
		let ctx = this.getContext();

		// Настраиваем цвет заливки
		ctx.fillStyle = this.options.fillStyle;
		
		// У нас шрифт Arial с размером 38 пикселей
		ctx.font = "38px Arial";
		
		// ВНЕЗАПНО, мы слишком ленивы чтобы писать алгоритм рисования звезды, поэтому давайте сделаем вид что она у нас есть
		ctx.fillText("*Схематичная фигура звезды*", x, y);
	}
}

// Регистрируем нашу "Звезду" в редакторе и
// она у нас появиться снизу в "Инструментах"
Editor.registerTool(Zvezda);

// Поздравляем!
// Если вы поняли как тут всё устроено,
// то и разработчиком стать вам не составит труда.
// * В папке "components" вы можете укунуться в пучины кода редактора.
// * Все стандартные инструменты и фигуры вы найдёте в файле "abstract.js"
// * "Связующим звеном" нашего редактора является файл "script.js"